y <- dat$density
z <- dat$quality
head(dat)
dat1 <- dat[,8:12]
dat1$sulphates <-NULL
head(dat1)
dat2 <- dat1
dat2$pH <-NULL
head(dat2)
mainmain <- "Wine characteristics"
x_lab <- "alcohol"
y_lab <-"density"
z_lab <-"quality"
dat1m <-as.matrix(dat1)
class(dat1m)
hist3D(z = dat1m, scale = FALSE, expand = 0.01, bty = "g", phi = 20,
col = "#0072B2", border = "black", shade = 0.2, ltheta = 90,
space = 0.3, ticktype = "detailed", d = 2)
hist3D (x = 1:5, y = 1:4, z = dat1m,
bty = "g", phi = 20,  theta = -60,
xlab = x_lab, ylab = y_lab, zlab = z_lab, main = mainmain,
col = "#0072B2", border = "black", shade = 0.8,
ticktype = "detailed", space = 0.15, d = 2, cex.axis = 1e-9)
hist3D (x = 1:length(x), y = 1:length(y), z = dat1m,
bty = "g", phi = 20,  theta = -60,
xlab = x_lab, ylab = y_lab, zlab = z_lab, main = mainmain,
col = "#0072B2", border = "black", shade = 0.8,
ticktype = "detailed", space = 0.15, d = 2, cex.axis = 1e-9)
text3D(x = 1:5, y = rep(0.5, 5), z = rep(3, 5),
labels = rownames(dat1m),
add = TRUE, adj = 0)
text3D(x = rep(1, 4),   y = 1:4, z = rep(0, 4),
labels  = colnames(dat1m),
add = TRUE, adj = 1)
setwd("C:/Users/Haineycf/Documents/GitHub")
dat <- read.csv("whitewines.csv")
head(dat)
str(dat)
round(cor(dat), digits = 2)
options(cor1, digits = 2)
fix(cor1)
cor1 <-round(cor(dat), digits = 2)
fix(cor1)
cor(dat[c("quality", "residual.sugars", "alcholo", "density")])
cor(dat[c("quality","alcohol","density")])
library(psych)
pairs.panels(dat[c("quality","alcohol","density")])
model <- lm(quality ~ ., data = dat)
model
summary(model)
models <-summary(model)
models$r.squared
model <- summary(lm(quality ~ ., data = dat))
model
model1 <- summary(lm(quality ~ fixed.acidity + volatile.acidity + residual.sugar + free.sulfur.dioxide + density + pH + sulphates + alcohol, data = dat ))
model4 <- summary(lm(quality ~ residual.sugar, data = dat))
model1 <- summary(lm(quality ~ fixed.acidity + volatile.acidity + residual.sugar + free.sulfur.dioxide + density + pH + sulphates + alcohol, data = dat ))
model2 <- summary(lm(quality ~ alcohol, data = dat))
model3 <- summary(lm(quality ~ density, data = dat))
model4 <- summary(lm(quality ~ residual.sugar, data = dat))
r_square <- c(models$r.squared, model1$r.squared, model2$r.squared,model3$r.squared,model4$r.squared)
wireframe(quality ~ density + alcohol, data=dat)
library(lattice)
wireframe(quality ~ density + alcohol, data=dat)
r_square
library(caret)
inBuild <- createDataPartition(y=dat$quality, p=0.7, list=FALSE)
validation <- dat[-inBuild,]; buildData <- dat[inBuild,]
inTrain <- createDataPartition(y=buildData$quality, p=0.7, list=FALSE)
training <- buildData[inTrain,]; testing <- buildData[-inTrain,]
train1 <- training
library(rpart)
m.rpart <- rpart(quality ~ ., data = training)
m.rpart
summary(m.rpart)
library(rpart.plot)
rpart.plot(m.rpart, digits = 3)
rpart.plot(m.rpart, digits = 4, fallen.leaves = TRUE, type = 3, extra = 101)
p.rpart <- predict(m.rpart, test)
p.rpart <- predict(m.rpart, testing)
summary(p.rpart)
summary(wine_test$quality)
summary(testing$quality)
cor(p.rpart, testing$quality)
MAE <- function(actual, predicted) {
mean(abs(actual - predicted))
}
MAE(p.rpart, testing$quality)
mean(training$quality) # result = 5.87
MAE(5.87, testing$quality)
mae_am <-mean(training$quality) # result = 5.87
MAE(mae_am, testing$quality)
MAE(mae_am, testing$quality)
library(RWeka)
m.m5p <- M5P(quality ~ ., data = training)
m.m5p
summary(m.m5p)
p.m5p <- predict(m.m5p, testing)
summary(p.m5p)
cor(p.m5p, testing$quality)
MAE(testing$quality, p.m5p)
normalize <- function(x) {
return((x - min(x)) / (max(x) - min(x)))
}
dat_norm <- as.data.frame(lapply(dat, normalize))
summary(dat_norm$alcohol)
summary(dat$alcohol)
library(neuralnet)
set.seed(12345) # to guarantee repeatable results
head(trainging)
head(training)
dat_model <- neuralnet(formula = quality ~ .,data = training)
dat_model <- neuralnet(formula = quality ~fixed.acidity +
volatile.acidity + citric.acid + residual.sugar+ chlorides +
free.sulfur.dioxide +  total.sulfur.dioxide + density +pH + sulphates + alcohol,
data = training)
plot(dat_model)
model_results <- compute(dat_model, testing)
model_results <- compute(dat_model, testing[1:8])
plot(dat_model)
summary(dat_model)
dat_model
model_results <- compute(dat_model, testing)
predicted_strength <- model_results$net.result
set.seed(12345) # to guarantee repeatable results
dat_model2 <- neuralnet(quality ~ density + alcohol +
volatile.acidity + free.sulfur.dioxide,
data = training, hidden = 5)
model_results2 <- compute(dat_model2, testing[1:8])
library(kernlab)
getwd()
setwd("C:/Users/Haineycf/Documents/GitHub/Machine Learning with R, Second Edition_Code/Chapter 09")
## Example: Finding Teen Market Segments ----
## Step 2: Exploring and preparing the data ----
teens <- read.csv("snsdata.csv")
str(teens)
table(teens$gender)
table(teens$gender, useNA = "ifany")
# look at missing data for age variable
summary(teens$age)
# eliminate age outliers
teens$age <- ifelse(teens$age >= 13 & teens$age < 20,
teens$age, NA)
summary(teens$age)
teens$female <- ifelse(teens$gender == "F" &
!is.na(teens$gender), 1, 0)
teens$no_gender <- ifelse(is.na(teens$gender), 1, 0)
# check our recoding work
table(teens$gender, useNA = "ifany")
table(teens$female, useNA = "ifany")
table(teens$no_gender, useNA = "ifany")
# finding the mean age by cohort
mean(teens$age) # doesn't work
mean(teens$age, na.rm = TRUE) # works
# age by cohort
aggregate(data = teens, age ~ gradyear, mean, na.rm = TRUE)
ave_age <- ave(teens$age, teens$gradyear,
FUN = function(x) mean(x, na.rm = TRUE))
teens$age <- ifelse(is.na(teens$age), ave_age, teens$age)
# check the summary results to ensure missing values are eliminated
summary(teens$age)
interests <- teens[5:40]
interests_z <- as.data.frame(lapply(interests, scale))
set.seed(2345)
teen_clusters <- kmeans(interests_z, 5)
teen_clusters$size
teen_clusters$centers
teens$cluster <- teen_clusters$cluster
teens[1:5, c("cluster", "gender", "age", "friends")]
aggregate(data = teens, age ~ cluster, mean)
aggregate(data = teens, female ~ cluster, mean)
# mean number of friends by cluster
aggregate(data = teens, friends ~ cluster, mean)
install.packages("VennDiagram")
library(VennDiagram)
cardiome <- letters[1:10]
superset <- letters[8:24]
overlap <- calculate.overlap(
x = list(
"Cardiome" = cardiome,
"SuperSet" = superset
)
);
overlap
venn.plot <- draw.pairwise.venn(100, 70, 30, c("First", "Second"));
grid.draw(venn.plot);
grid.newpage();
venn.plot
require(venneuler)
v <- venneuler(c(A=450, B=1800, "A&B"=230))
plot(v)
plot(v)
v <- venneuler(c(A=450, B=1800, "A&B"=230))
require(VennDiagram)
venn.diagram(list(B = 1:1800, A = 1571:2020),fill = c("red", "green"),
alpha = c(0.5, 0.5), cex = 2,cat.fontface = 4,lty =2, fontfamily =3,
filename = "trial2.emf");
venn.diagram(list(B = 1:1800, A = 1571:2020),fill = c("red", "green"),
alpha = c(0.5, 0.5), cex = 2,lty =2,
filename = "trial2.emf");
venn.diagram(list(B = 1:1800, A = 1571:2020),fill = c("red", "green"),
alpha = c(0.5, 0.5), cex = 2,lty =2)
venn.diagram(list(B = 1:1800, A = 1571:2020),fill = c("red", "green"),
alpha = c(0.5, 0.5), cex = 2,lty =2,filename = "trial2.emf")
require(gplots)
oneName <- function() paste(sample(LETTERS,5,replace=TRUE),collapse="")
geneNames <- replicate(1000, oneName())
GroupA <- sample(geneNames, 400, replace=FALSE)
GroupB <- sample(geneNames, 750, replace=FALSE)
GroupC <- sample(geneNames, 250, replace=FALSE)
GroupD <- sample(geneNames, 300, replace=FALSE)
venn(list(GrpA=GroupA,GrpB=GroupB,GrpC=GroupC,GrpD=GroupD))
oneName <- function() paste(sample(LETTERS,5,replace=TRUE),collapse="")
geneNames <- replicate(1000, oneName())
GroupA <- sample(geneNames, 400, replace=FALSE)
GroupB <- sample(geneNames, 750, replace=FALSE)
GroupC <- sample(geneNames, 250, replace=FALSE)
GroupD <- sample(geneNames, 300, replace=FALSE)
venn(list(GrpA=GroupA,GrpB=GroupB,GrpC=GroupC,GrpD=GroupD))
library(eulerr)
install.packages("eulerr")
library(eulerr)
fit <- eulerr(c(A = 450, B = 1800, "A&B" = 230))
plot(fit, fill_opacity = 0.3)
fit <- eulerr(c(A = 450, B = 1800, C = 1000, "A&B&C" = 20, "A&C" = 5, "B&C" = 400,"A&B" = 230))
plot(fit, fill_opacity = 0.3)
venn(list(GrpA=GroupA,GrpB=GroupB,GrpC=GroupC,GrpD=GroupD),fill = c("skyblue", "pink1",
"mediumorchid", "orange"))
plot(fit, fill_opacity = 0.3)
par(ask=TRUE)
opar <- par(no.readonly=TRUE) # save original parameter settings
library(vcd)
counts <- table(Arthritis$Improved)
counts
barplot(counts,
main="Simple Bar Plot",
xlab="Improvement", ylab="Frequency")
barplot(counts,
main="Horizontal Bar Plot",
xlab="Frequency", ylab="Improvement",
horiz=TRUE)
library(vcd)
counts <- table(Arthritis$Improved, Arthritis$Treatment)
counts
barplot(counts,
main="Stacked Bar Plot",
xlab="Treatment", ylab="Frequency",
col=c("red", "yellow","green"),
legend=rownames(counts))
barplot(counts,
main="Grouped Bar Plot",
xlab="Treatment", ylab="Frequency",
col=c("red", "yellow", "green"),
legend=rownames(counts), beside=TRUE)
states <- data.frame(state.region, state.x77)
means <- aggregate(states$Illiteracy, by=list(state.region), FUN=mean)
means
means <- means[order(means$x),]
means
barplot(means$x, names.arg=means$Group.1)
par(las=2)                # set label text perpendicular to the axis
par(mar=c(5,8,4,2))       # increase the y-axis margin
counts <- table(Arthritis$Improved) # get the data for the bars
barplot(counts,
main="Treatment Outcome", horiz=TRUE, cex.names=0.8,
names.arg=c("No Improvement", "Some Improvement", "Marked Improvement")
)
library(vcd)
attach(Arthritis)
counts <- table(Treatment,Improved)
spine(counts, main="Spinogram Example")
par(mfrow=c(2,2))
slices <- c(10, 12,4, 16, 8)
lbls <- c("US", "UK", "Australia", "Germany", "France")
pie(slices, labels = lbls,
main="Simple Pie Chart")
pct <- round(slices/sum(slices)*100)
lbls <- paste(lbls, pct)
lbls <- paste(lbls,"%",sep="")
pie(slices,labels = lbls, col=rainbow(length(lbls)),
main="Pie Chart with Percentages")
library(plotrix)
pie3D(slices, labels=lbls,explode=0.1,
main="3D Pie Chart ")
mytable <- table(state.region)
lbls <- paste(names(mytable), "\n", mytable, sep="")
pie(mytable, labels = lbls,
main="Pie Chart from a dataframe\n (with sample sizes)")
par(opar)
library(plotrix)
slices <- c(10, 12,4, 16, 8)
lbls <- c("US", "UK", "Australia", "Germany", "France")
fan.plot(slices, labels = lbls, main="Fan Plot")
# Listing 6.6 - Histograms
# simple histogram                                                        1
hist(mtcars$mpg)
hist(mtcars$mpg,
breaks=12,
col="red",
xlab="Miles Per Gallon",
main="Colored histogram with 12 bins")
hist(mtcars$mpg,
freq=FALSE,
breaks=12,
col="red",
xlab="Miles Per Gallon",
main="Histogram, rug plot, density curve")
lines(density(mtcars$mpg), col="blue", lwd=2)
x <- mtcars$mpg
h<-hist(x,
breaks=12,
col="red",
xlab="Miles Per Gallon",
main="Histogram with normal curve and box")
yfit<-dnorm(xfit,mean=mean(x),sd=sd(x))
yfit <- yfit*diff(h$mids[1:2])*length(x)
lines(xfit, yfit, col="blue", lwd=2)
box()
h<-hist(x,
breaks=12,
col="red",
xlab="Miles Per Gallon",
main="Histogram with normal curve and box")
yfit<-dnorm(xfit,mean=mean(x),sd=sd(x))
yfit <- yfit*diff(h$mids[1:2])*length(x)
lines(xfit, yfit, col="blue", lwd=2)
box()
d <- density(mtcars$mpg) # returns the density data
plot(d) # plots the results
d <- density(mtcars$mpg)
plot(d, main="Kernel Density of Miles Per Gallon")
rug(mtcars$mpg, col="brown")
par(lwd=2)
library(sm)
attach(mtcars)
install.packages("sm")
library(sm)
attach(mtcars)
cyl.f <- factor(cyl, levels= c(4, 6, 8),
labels = c("4 cylinder", "6 cylinder", "8 cylinder"))
sm.density.compare(mpg, cyl, xlab="Miles Per Gallon")
# add legend via mouse click
colfill<-c(2:(2+length(levels(cyl.f))))
cat("Use mouse to place legend...","\n\n")
legend(locator(1), levels(cyl.f), fill=colfill)
detach(mtcars)
par(lwd=1)
boxplot(mpg~cyl,data=mtcars,
main="Car Milage Data",
xlab="Number of Cylinders",
ylab="Miles Per Gallon")
boxplot(mpg~cyl,data=mtcars,
notch=TRUE,
varwidth=TRUE,
col="red",
main="Car Mileage Data",
xlab="Number of Cylinders",
ylab="Miles Per Gallon")
mtcars$cyl.f <- factor(mtcars$cyl,
levels=c(4,6,8),
labels=c("4","6","8"))
# create a factor for transmission type
mtcars$am.f <- factor(mtcars$am,
levels=c(0,1),
labels=c("auto","standard"))
boxplot(mpg ~ am.f *cyl.f,
data=mtcars,
varwidth=TRUE,
col=c("gold", "darkgreen"),
main="MPG Distribution by Auto Type",
xlab="Auto Type")
library(vioplot)
install.packages("vioplot")
x1 <- mtcars$mpg[mtcars$cyl==4]
x2 <- mtcars$mpg[mtcars$cyl==6]
x3 <- mtcars$mpg[mtcars$cyl==8]
vioplot(x1, x2, x3,
names=c("4 cyl", "6 cyl", "8 cyl"),
col="gold")
title("Violin Plots of Miles Per Gallon")
dotchart(mtcars$mpg,labels=row.names(mtcars),cex=.7,
main="Gas Mileage for Car Models",
xlab="Miles Per Gallon")
x <- mtcars[order(mtcars$mpg),]
x$cyl <- factor(x$cyl)
x$color[x$cyl==4] <- "red"
x$color[x$cyl==6] <- "blue"
x$color[x$cyl==8] <- "darkgreen"
dotchart(x$mpg,
labels = row.names(x),
cex=.7,
pch=19,
groups = x$cyl,
gcolor = "black",
color = x$color,
main = "Gas Mileage for Car Models\ngrouped by cylinder",
xlab = "Miles Per Gallon")
getwd()
setwd("C:/Users/Haineycf/Documents/GitHub")
doc1 <- read.csv("whitewine.csv")
doc1 <- read.csv("whitewines.csv")
doc2 <- read.csv("redwines.csv")
doc1$type <-"white"
doc2$type <-"red"
head(doc1)
colnames(doc1)
colnames(doc2)
dat <-cbind(doc1,doc2)
dat <-rbind(doc1,doc2)
counts <- table(dat$type)
counts
barplot(counts,
main="Simple Bar Plot",
xlab="Improvement", ylab="Frequency")
dat <- read.csv("C:/Users/Haineycf/Documents/GitHub/whitewines.csv")
colnames(dat)
with(dat, text3D(alcohol, density, quality,
labels = rownames(dat), colvar = pH,
col = gg.col(100), theta = 60, phi = 20,
xlab = x_lab, ylab = y_lab, zlab = z_lab,
main = mainmain, cex = 0.6,
bty = "g", ticktype = "detailed", d = 2,
clab = c(z_lab), adj = 0.5, font = 2))
x <- dat$alcohol
y <- dat$density
z <- dat$quality
dat1 <- dat[,8:12]
dat1$sulphates <-NULL
dat2 <- dat1
dat2$pH <-NULL
head(dat2)
head(dat1)
dat1$pH <-NULL
head(dat1)
dat1m <-as.matrix(dat1)
hist3D(z = dat1m, scale = FALSE, expand = 0.01, bty = "g", phi = 20,
col = "#0072B2", border = "black", shade = 0.2, ltheta = 90,
space = 0.3, ticktype = "detailed", d = 2)
library(plot3D)
hist3D(z = dat1m, scale = FALSE, expand = 0.01, bty = "g", phi = 20,
col = "#0072B2", border = "black", shade = 0.2, ltheta = 90,
space = 0.3, ticktype = "detailed", d = 2)
text3D(x = rep(1, 4),   y = 1:4, z = rep(0, 4),
labels  = colnames(dat1m),
add = TRUE, adj = 1)
dat.xyz <-as.matrix(x,y,z)
hist3D(z = dat.xyz, scale = FALSE, expand = 0.01, bty = "g", phi = 20,
col = "#0072B2", border = "black", shade = 0.2, ltheta = 90,
space = 0.3, ticktype = "detailed", d = 2)
text3D(x = rep(1, 4),   y = 1:4, z = rep(0, 4),
labels  = colnames(dat.xyz),
add = TRUE, adj = 1)
text3D(x = x,   y = y, z = z,
labels  = colnames(dat.xyz),
add = TRUE, adj = 1)
with(dat, text3D(alcohol, density, quality,
labels = rownames(dat), colvar = pH,
col = gg.col(100), theta = 60, phi = 20,
xlab = x_lab, ylab = y_lab, zlab = z_lab,
main = mainmain, cex = 0.6,
bty = "g", ticktype = "detailed", d = 2,
clab = c(z_lab), adj = 0.5, font = 2))
with(dat, text3D(x_lab, y_lab, quality,
labels = rownames(dat), colvar = pH,
col = gg.col(100), theta = 60, phi = 20,
xlab = x_lab, ylab = y_lab, zlab = z_lab,
main = mainmain, cex = 0.6,
bty = "g", ticktype = "detailed", d = 2,
clab = c(z_lab), adj = 0.5, font = 2))
with(dat, text3D(x, y, z,
labels = rownames(x), colvar = pH,
col = gg.col(100), theta = 60, phi = 20,
xlab = x_lab, ylab = y_lab, zlab = z_lab,
main = mainmain, cex = 0.6,
bty = "g", ticktype = "detailed", d = 2,
clab = c(z_lab), adj = 0.5, font = 2))
with(dat, text3D(x, y, z,
labels = rownames(dat.xyz), colvar = pH,
col = gg.col(100), theta = 60, phi = 20,
xlab = x_lab, ylab = y_lab, zlab = z_lab,
main = mainmain, cex = 0.6,
bty = "g", ticktype = "detailed", d = 2,
clab = c(z_lab), adj = 0.5, font = 2))
df.xyz <-as.data.frame(dat.xyz)
with(df.xyz, text3D(x, y, z,
labels = rownames(df.xyz), colvar = pH,
col = gg.col(100), theta = 60, phi = 20,
xlab = x_lab, ylab = y_lab, zlab = z_lab,
main = mainmain, cex = 0.6,
bty = "g", ticktype = "detailed", d = 2,
clab = c(z_lab), adj = 0.5, font = 2))
head(df.xyz)
dat.xyz
df.xyz <-as.data.frame(cbind(x,y,z))
head(df.xyz)
with(df.xyz, text3D(x, y, z,
labels = rownames(df.xyz), colvar = z,
col = gg.col(100), theta = 60, phi = 20,
xlab = x_lab, ylab = y_lab, zlab = z_lab,
main = mainmain, cex = 0.6,
bty = "g", ticktype = "detailed", d = 2,
clab = c(z_lab), adj = 0.5, font = 2))
with(df.xyz, text3D(x, y, z,
labels = rownames(dat), colvar = z,
col = gg.col(100), theta = 60, phi = 20,
xlab = x_lab, ylab = y_lab, zlab = z_lab,
main = mainmain, cex = 0.6,
bty = "g", ticktype = "detailed", d = 2,
clab = c(z_lab), adj = 0.5, font = 2))
with(df.xyz, scatter3D(x,y,z, - 1,
colvar = z, col = gg.col(100),
type = "h", pch = ".", add = TRUE))
